
org: sparrro

service: backend

provider:
  name: aws
  runtime: nodejs20.x
  environment:
    REGION: "eu-north-1"
    JWT_SECRET: ${ env:JWT_SECRET }
  region: eu-north-1
  iam:
    role: ${ env:AWS_ROLE }

build:
  esbuild:
    minify: true

package:
  individually: true

functions:
  createAccount:
    handler: functions/createAccount/index.handler
    events:
      - httpApi:
          path: /account/signup
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  logIn:
    handler: functions/logIn/index.handler
    events:
      - httpApi:
          path: /account/login
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  getAccount:
    handler: functions/getAccount/index.handler
    events:
      - httpApi:
          path: /account
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  createMeetup:
    handler: functions/createMeetup/index.handler
    events:
      - httpApi:
          path: /meetup
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  deleteMeetup:
    handler: functions/deleteMeetup/index.handler
    events:
      - httpApi:
          path: /meetup/{id}
          method: delete
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  getAllMeetups:
    handler: functions/getAllMeetups/index.handler
    events:
      - httpApi:
          path: /meetup
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  getMeetup:
    handler: functions/getMeetup/index.handler
    events:
      - httpApi:
          path: /meetup/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  joinMeetup:
    handler: functions/joinMeetup/index.handler
    events:
      - httpApi:
          path: /meetup/join/{id}
          method: put
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  unjoinMeetup:
    handler: functions/unjoinMeetup/index.handler
    events:
      - httpApi:
          path: /meetup/unjoin/{id}
          method: put
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
  

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "username"
            AttributeType: "S"
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: usernameIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - password
        BillingMode: PAY_PER_REQUEST
    MeetupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Meetups
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
